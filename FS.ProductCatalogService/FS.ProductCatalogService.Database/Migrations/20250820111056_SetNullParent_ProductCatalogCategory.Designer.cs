// <auto-generated />
using System;
using FS.ProductCatalogService.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FS.ProductCatalogService.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250820111056_SetNullParent_ProductCatalogCategory")]
    partial class SetNullParent_ProductCatalogCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FS.ProductCatalogService.Database.Entities.Product", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Count")
                        .HasColumnType("numeric")
                        .HasColumnName("count");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductCatalogTypeID")
                        .HasColumnType("uuid")
                        .HasColumnName("product_catalog_type_id");

                    b.HasKey("ID")
                        .HasName("pk_product");

                    b.HasIndex(new[] { "Name" }, "ui_product_name")
                        .IsUnique();

                    b.HasIndex(new[] { "ProductCatalogTypeID" }, "ui_product_product_catalog_type_id");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("FS.ProductCatalogService.Database.Entities.ProductCatalogCategory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentProductCatalogCategoryID")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_product_catalog_category_id");

                    b.HasKey("ID")
                        .HasName("pk_product_catalog_category");

                    b.HasIndex(new[] { "ParentProductCatalogCategoryID" }, "ix_product_catalog_category_parent");

                    b.HasIndex(new[] { "Name" }, "ui_product_catalog_category_name")
                        .IsUnique();

                    b.ToTable("product_catalog_category", (string)null);
                });

            modelBuilder.Entity("FS.ProductCatalogService.Database.Entities.ProductCatalogType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<Guid>("ProductCatalogCategoryID")
                        .HasColumnType("uuid")
                        .HasColumnName("product_catalog_category_id");

                    b.HasKey("ID")
                        .HasName("pk_product_catalog_type");

                    b.HasIndex(new[] { "ProductCatalogCategoryID" }, "ix_product_catalog_type_product_catalog_category");

                    b.HasIndex(new[] { "Name" }, "ui_product_catalog_type_name")
                        .IsUnique();

                    b.ToTable("product_catalog_type", (string)null);
                });

            modelBuilder.Entity("FS.ProductCatalogService.Database.Entities.Product", b =>
                {
                    b.HasOne("FS.ProductCatalogService.Database.Entities.ProductCatalogType", "ProductCatalogType")
                        .WithMany()
                        .HasForeignKey("ProductCatalogTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_product_catalog_type");

                    b.Navigation("ProductCatalogType");
                });

            modelBuilder.Entity("FS.ProductCatalogService.Database.Entities.ProductCatalogCategory", b =>
                {
                    b.HasOne("FS.ProductCatalogService.Database.Entities.ProductCatalogCategory", "ParentProductCatalogCategory")
                        .WithMany()
                        .HasForeignKey("ParentProductCatalogCategoryID")
                        .HasConstraintName("fk_product_catalog_category_parent");

                    b.Navigation("ParentProductCatalogCategory");
                });

            modelBuilder.Entity("FS.ProductCatalogService.Database.Entities.ProductCatalogType", b =>
                {
                    b.HasOne("FS.ProductCatalogService.Database.Entities.ProductCatalogCategory", "ProductCatalogCategory")
                        .WithMany()
                        .HasForeignKey("ProductCatalogCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_catalog_type_product_catalog_category");

                    b.Navigation("ProductCatalogCategory");
                });
#pragma warning restore 612, 618
        }
    }
}
